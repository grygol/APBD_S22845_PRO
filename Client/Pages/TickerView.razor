@page "/tickerview/{ticker}"
@using Microsoft.AspNetCore.Authorization
@using APBD_PRO.Shared
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Data 
@attribute [Authorize]
@inject HttpClient Http
@*<h3>@fullTicker.name (@ticker)</h3>*@

@if (fullTicker == null)
{
    <div class="stockchartloader">
    </div>
}
else
{
    <h1>@fullTicker.name</h1>
    <h3 style="color:darkgray">@fullTicker.ticker</h3>
    <br/>
    <SfButton IsPrimary="true" IconCss="@watchListButtonCss" Content="@watchListButtonContent" @onclick="watchListButtonClick"></SfButton>
}


<SfTab>
    <TabAnimationSettings>
        <TabAnimationNext Effect="AnimationEffect.None"></TabAnimationNext>
        <TabAnimationPrevious Effect="AnimationEffect.None"></TabAnimationPrevious>
    </TabAnimationSettings>

    <TabItems>

        <TabItem>
            <ChildContent>
                <TabHeader Text="Overview"></TabHeader>
            </ChildContent>
            <ContentTemplate>
                @if (fullTicker == null)
                {
                    <div class="stockchartloader">
                    </div>
                }
                else
                {
                    <br />
                    <SfDashboardLayout Columns="4" CellSpacing="@(new double[]{20 ,20 })" MediaQuery="max-height:300px" CellAspectRatio="2">
                        <DashboardLayoutPanels>
                            <DashboardLayoutPanel Column="0" SizeX="2" SizeY="2" MaxSizeY="2">
                                <HeaderTemplate><div>Company description</div></HeaderTemplate>
                                <ContentTemplate><div class="text-left"><p class="lead">@fullTicker.description</p></div></ContentTemplate>
                            </DashboardLayoutPanel>
                            <DashboardLayoutPanel SizeX="1" Column="3" Row="1" MaxSizeY="1">
                                <HeaderTemplate><div>Localization</div></HeaderTemplate>
                                <ContentTemplate><div><p class="lead">@fullTicker.address["address1"], @fullTicker.address["city"]</p></div></ContentTemplate>
                            </DashboardLayoutPanel>
                            <DashboardLayoutPanel SizeX="1" Column="2" Row="0" MaxSizeY="1">
                                <HeaderTemplate><div>Primary exchange</div></HeaderTemplate>
                                <ContentTemplate><div><h1>@fullTicker.primary_exchange</h1></div></ContentTemplate>
                            </DashboardLayoutPanel>
                            <DashboardLayoutPanel SizeX="1" Column="3" Row="0" MaxSizeY="1">
                                <HeaderTemplate><div>Total employees</div></HeaderTemplate>
                                <ContentTemplate><div><h1>@fullTicker.total_employees</h1></div></ContentTemplate>
                            </DashboardLayoutPanel>
                            <DashboardLayoutPanel SizeX="1" Column="2" Row="1" MaxSizeY="1">
                                <HeaderTemplate><div>Contact details</div></HeaderTemplate>
                                <ContentTemplate>
                                    <div>
                                        <p class="lead">
                                            <a href="@fullTicker.homepage_url">@fullTicker.homepage_url</a>
                                            <br />
                                            @fullTicker.phone_number
                                        </p>
                                    </div>
                                </ContentTemplate>
                            </DashboardLayoutPanel>

                            <DashboardLayoutPanel SizeX="1" Column="3" Row="2" MaxSizeY="1" Enabled="@(imgSrc!=null)">
                                <HeaderTemplate><div>Logo</div></HeaderTemplate>
                                <ContentTemplate><img class="logo_img" src="@imgSrc" height="100%"/></ContentTemplate>
                            </DashboardLayoutPanel>
                        </DashboardLayoutPanels>
                    </SfDashboardLayout>

                }
            </ContentTemplate>
        </TabItem>

        <TabItem>
            <ChildContent>
                <TabHeader Text="Chart"></TabHeader>
            </ChildContent>
            <ContentTemplate>

                @if (DataSource == null)
                {
                    <div class="stockchartloader">
                    </div>
                }
                else
                {

                    <div class="@loadClass"></div>
                    <div class="@loadDiv">

                        <SfStockChart Title="@fullTicker.name">
                            <StockChartCrosshairSettings Enable="true"></StockChartCrosshairSettings>

                            <StockChartPeriods>
                                <StockChartPeriod IntervalType="RangeIntervalType.Days" Interval="1" Text="1D"></StockChartPeriod>
                                <StockChartPeriod IntervalType="RangeIntervalType.Weeks" Interval="1" Text="1W" Selected="true"></StockChartPeriod>
                                <StockChartPeriod IntervalType="RangeIntervalType.Months" Interval="1" Text="1M"></StockChartPeriod>
                                <StockChartPeriod IntervalType="RangeIntervalType.Months" Interval="3" Text="3M"></StockChartPeriod>
                            </StockChartPeriods>

                            <StockChartEvents OnLoaded="@ChartLoaded"></StockChartEvents>

                            <StockChartPrimaryXAxis>
                                <StockChartAxisMajorGridLines Width="0"></StockChartAxisMajorGridLines>
                                <StockChartAxisCrosshairTooltip Enable="true"></StockChartAxisCrosshairTooltip>
                            </StockChartPrimaryXAxis>

                            <StockChartPrimaryYAxis>
                                <StockChartAxisLineStyle Width="0"></StockChartAxisLineStyle>
                                <StockChartAxisMajorTickLines Width="0"></StockChartAxisMajorTickLines>
                            </StockChartPrimaryYAxis>

                            <StockChartTooltipSettings Enable="true"></StockChartTooltipSettings>

                            <StockChartCrosshairSettings Enable="true"></StockChartCrosshairSettings>

                            <StockChartSeriesCollection>
                                <StockChartSeries DataSource="@DataSource" Type="ChartSeriesType.HiloOpenClose" XName="date"></StockChartSeries>
                            </StockChartSeriesCollection>

                            <StockChartChartArea>
                                <StockChartChartAreaBorder Width="0"></StockChartChartAreaBorder>
                            </StockChartChartArea>

                        </SfStockChart>
                    </div>
                }
            </ContentTemplate>
        </TabItem>

        <TabItem>
            <ChildContent>
                <TabHeader Text="News"></TabHeader>
            </ChildContent>

            <ContentTemplate>

                @if (TickerNews == null)
                {
                    <div class="stockchartloader">
                    </div>
                }
                else
                {
                    @foreach (TickerNews n in TickerNews)
                    {
                        <SfCard>
                            <CardHeader Title="@n.title" SubTitle="@n.author" ImageUrl="@n.image_url" />
                            <CardContent Content="@n.description" />
                            <CardFooter>
                                <CardFooterContent>
                                    <a href="@n.article_url" class="btn">
                                        <SfButton CssClass="e-btn e-primary">Read More</SfButton>
                                    </a>
                                </CardFooterContent>
                            </CardFooter>
                        </SfCard>
                    }
                }


            </ContentTemplate>

        </TabItem>


    </TabItems>
</SfTab>

<style>
    .stockchartloader {
        border: 6px solid #f3f3f3;
        border-top: 6px solid #7a0fff;
        width: 40px;
        height: 40px;
        position: absolute;
        top: 46%;
        left: 46%;
        border-radius: 50%;
        -webkit-animation: loader 2s linear infinite;
        animation: loader 2s linear infinite;
    }

    .stockchartdiv {
        visibility: hidden;
    }

    .e-tab .e-tab-header:not(.e-vertical) .e-indicator, .e-tab .e-tab-header.e-vertical .e-indicator {
        transition: none;
    }

    .e-panel-content {
        padding: 10px;
        overflow: auto;
    }

    .e-card {
        padding-left: 20px;
        margin-bottom: 20px;
    }

    .e-btn a.btn{
        border: none;
    }

    .img.logo_img{
        aspect-ratio: 1/1;
    }
</style>


@code {
    [Parameter]
    public string? ticker { get; set; }

    public FullTicker? fullTicker { get; set; }
    @*public List<ChartData>? StockDetails { get; set; }*@
    private ChartData[] DataSource;
    public TickerNews[]? TickerNews { get; set; }
    private bool isOnWatchList { get; set; }

    private String imgSrc = "";

    private string watchListButtonCss = "";
    private string watchListButtonContent = "";

    private async void watchListButtonClick()
    {
        if (isOnWatchList)
        {
            await Http.DeleteAsync($"api/Watchlists/{ticker}");
            isOnWatchList = false;
            watchListButtonChange();
        } else
        {
            await Http.PostAsync($"api/Watchlists/{ticker}", null);
            isOnWatchList = true;
            watchListButtonChange();
        }
    }

    protected override async Task OnInitializedAsync()
    {

        try
        {
            fullTicker = await Http.GetFromJsonAsync<FullTicker>($"api/Polygon/GetFullTicker/{ticker}");
        }
        catch (Exception)
        {
            fullTicker = new FullTicker();
        }

        try
        {

            DataSource = await Http.GetFromJsonAsync<ChartData[]>($"api/Polygon/GetChartData/{ticker}");
        }
        catch (Exception)
        {
            DataSource = new List<ChartData>().ToArray();
        }

        try
        {
            TickerNews = await Http.GetFromJsonAsync<TickerNews[]>($"api/Polygon/GetNews/{ticker}");

        }
        catch (Exception)
        {
            TickerNews = new List<TickerNews>().ToArray();
        }

        isOnWatchList = (await Http.GetFromJsonAsync<BasicTicker[]>("api/Watchlists")).Where(e => e.ticker == ticker).Count()>0 ? true : false;

        if (fullTicker.branding.ContainsKey("icon_url"))
        {
            imgSrc = await Http.GetStringAsync($"api/Polygon/GetResource?url={fullTicker.branding["icon_url"]}");
        }

        watchListButtonChange();

        @*StockDetails = await Http.GetFromJsonAsync<List<ChartData>>("api/Polygon/GetChartData");*@

        @*Console.WriteLine("AAA: " + StockDetails.Select(e => e.Date).FirstOrDefault());*@
    }

    public class ChartData
    {
        public DateTime date { get; set; }
        public double? open { get; set; }
        public double? low { get; set; }
        public double? close { get; set; }
        public double? high { get; set; }
        public double? volume { get; set; }
    }

    string loadClass = "stockchartloader";
    string loadDiv = "stockchartdiv";

    void ChartLoaded(StockChartEventArgs args)
    {
        loadClass = "";
        loadDiv = "";
        StateHasChanged();
    }

    void watchListButtonChange()
    {
        watchListButtonContent = isOnWatchList ? "Remove from watchlist" : "Add to watchlist";
        StateHasChanged();
    }


}

